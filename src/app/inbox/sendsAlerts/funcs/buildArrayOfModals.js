import {
  columnsAlertModels,
  columnsDependencies,
  columnsOfCarpetas,
  columnsOfSeries,
  columnsOfTipoDocumentales,
  columnsOfTipoDocumento,
  columnsOfUser,
  columnsOfficesDestination,
  columnsProcessTypes,
} from './ValueListColumns'

export const buildArrayOfModals = ({
  modalDependencies,
  dependencies,
  modalRegisteredProcess,
  processTypesFiltered,
  searchProcessType,
  loadingProcessTypes,
  modalAlertsModels,
  alertModels,
  searchAlertsModel,
  loadingAlertModels,
}) => {
  return [
    {
      title: 'Dependencia',
      openOptions: modalDependencies,
      rows: dependencies ?? [],
      columns: columnsDependencies,
      //searchOptions: searchJobTitleVL,
      //pagination: paginationJobTitles,
      name: 'office',
    },
    {
      title: 'Tipo de proceso',
      openOptions: modalRegisteredProcess,
      rows: processTypesFiltered ?? [],
      columns: columnsProcessTypes,
      searchOptions: searchProcessType,
      //pagination: paginationOffices,
      loading: loadingProcessTypes,
      name: 'typeProcess',
    },
    {
      title: 'Modelo de alertas',
      openOptions: modalAlertsModels,
      rows: alertModels?.data ?? [],
      columns: columnsAlertModels,
      searchOptions: searchAlertsModel,
      //pagination: paginationOffices,
      loading: loadingAlertModels,
      name: 'additionalData.modelFilter',
    },
  ]
}

export const buildArrayOfModalsSigedoc = ({
  series,
  modalSeries,
  carpetas,
  modalCarpetas,
  tipoDocumentales,
  modalTipoDocumentales,
  tipoDocumento,
  modalTipoDocumento,
  users,
  modalUser,
  officesDestination,
  loadingOfficesDestination,
  modalOfficesDestination,
  searchDestinyOffice,
  paginationOffices,
}) => {
  return [
    {
      title: 'Serie',
      openOptions: modalSeries,
      rows: series?.data ?? [],
      columns: columnsOfSeries,
      //searchOptions: searchJobTitleVL,
      //pagination: paginationJobTitles,
      name: 'serie',
    },
    {
      title: 'Expediente',
      openOptions: modalCarpetas,
      rows: carpetas?.Carpetas?.map((row) => ({ ...row, id: row?.idCarpeta ?? '' })) ?? [],
      columns: columnsOfCarpetas,
      //searchOptions: searchOffice,
      //pagination: paginationOffices,
      //loading: loadingOfficesDestination,
      name: 'carpeta',
    },
    {
      title: 'Tipo documental',
      openOptions: modalTipoDocumentales,
      rows: tipoDocumentales?.data ?? [],
      columns: columnsOfTipoDocumentales,
      //searchOptions: searchOffice,
      //pagination: paginationOffices,
      //loading: loadingRegisteredProcess,
      name: 'tipoDocumentales',
      toggleDisabled: (params) => params?.row?.isActive === 'Activo',
    },
    {
      title: 'Tipo documento',
      openOptions: modalTipoDocumento,
      rows: tipoDocumento?.data ?? [],
      columns: columnsOfTipoDocumento,
      //searchOptions: searchOffice,
      //pagination: paginationOffices,
      //loading: loadingRegisteredProcess,
      name: 'tipoDocumento',
    },
    {
      title: 'Dependencia de destino',
      openOptions: modalOfficesDestination,
      rows: officesDestination?.data ?? [],
      columns: columnsOfficesDestination,
      searchOptions: searchDestinyOffice,
      pagination: paginationOffices,
      loading: loadingOfficesDestination,
      name: 'additionalData.officeDestination',
    },
    {
      title: 'Usuario destino',
      openOptions: modalUser,
      rows: users?.data?.map((row) => ({ ...row, id: row?.identificacion ?? '' })) ?? [],
      columns: columnsOfUser,
      //searchOptions: searchOffice,
      //pagination: paginationOffices,
      //loading: loadingRegisteredProcess,
      name: 'usuarioDestino',
    },
  ]
}
